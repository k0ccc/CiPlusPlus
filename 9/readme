Цель: Научиться инициализировать объекты класса при их создании с помощью конструкторов. Понять назначение explicit.
Объяснение:

    Конструктор: Специальный метод класса, имя которого совпадает с именем класса. Он не имеет возвращаемого типа (даже void). Вызывается автоматически при создании объекта. Его задача - инициализация членов класса.
    Конструктор по умолчанию: Конструктор без параметров (Counter() {}). Если вы не определили ни одного конструктора, компилятор создаст его сам (пустой). Если вы определили хотя бы один свой конструктор, компилятор не создаст конструктор по умолчанию автоматически.
    Параметризованный конструктор: Конструктор, принимающий аргументы (Counter(int startValue)).
    Список инициализации членов: Лучший способ инициализировать члены класса в конструкторе - использовать список инициализации после двоеточия : перед телом конструктора: Counter(int startValue) : count_(startValue) {}. Это эффективнее и предпочтительнее, чем присваивание в теле конструктора (Counter(int startValue) { count_ = startValue; }).
    explicit: Ключевое слово, которое можно поставить перед конструктором (обычно тем, который может быть вызван с одним аргументом). Оно запрещает неявные (implicit) преобразования типов с использованием этого конструктора.
        Пример: Если есть class Foo { public: Foo(int x); };, то компилятор может разрешить написать Foo myFoo = 10;, неявно преобразовав int в Foo через конструктор. Если же конструктор объявлен как explicit Foo(int x);, то такой код вызовет ошибку, и нужно будет писать явно: Foo myFoo(10); или Foo myFoo{10};. Использование explicit для конструкторов с одним аргументом считается хорошей практикой, так как предотвращает неожиданные неявные преобразования.

Задание:

    Модифицируйте класс Counter из предыдущей задачи.
    Удалите инициализацию count_ = 0; при объявлении.
    Добавьте в public: секцию конструктор explicit Counter(int startValue), который инициализирует count_ переданным значением startValue с помощью списка инициализации членов.
    Добавьте также конструктор по умолчанию Counter(), который инициализирует count_ нулем (Counter() : count_(0) {}). Это нужно, чтобы можно было создавать счетчик без начального значения.
    В main создайте два объекта:
        Counter c1; (используется конструктор по умолчанию)
        Counter c2(100); (используется параметризованный конструктор)
    Выведите начальные значения обоих счетчиков с помощью getValue().
    Попробуйте написать Counter c3 = 50;. Если конструктор explicit, эта строка не должна скомпилироваться. Убедитесь в этом. Закомментируйте ее и используйте Counter c3(50); или Counter c3{50};.