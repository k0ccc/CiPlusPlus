Цель: Понять, что такое указатель, как получить адрес переменной и как получить значение по адресу.
Объяснение:

    Указатель (Pointer): Это переменная, которая хранит не само значение (как int, float, bool), а адрес в памяти, где находится другая переменная. Представьте ячейку памяти с номером (адресом); указатель хранит этот номер.
    Объявление указателя: Мы указываем тип данных, на который будет указывать указатель, и ставим звездочку (*) перед именем переменной: int* ptr; (ptr — это указатель на int). double* d_ptr; (указатель на double).
    Оператор & (Address-of / Взятие адреса): Позволяет получить адрес существующей переменной в памяти. int number = 10; int* ptr_to_number = &number; (теперь ptr_to_number хранит адрес, где в памяти лежит number).
    Оператор * (Dereference / Разыменование): Когда он стоит перед переменной-указателем (а не в объявлении), он позволяет получить значение, которое хранится по адресу, записанному в указателе. int value_from_ptr = *ptr_to_number; (теперь value_from_ptr будет равно 10, потому что ptr_to_number указывает на number, а * достает значение number). Также через разыменование можно изменить исходное значение: *ptr_to_number = 25; (теперь number станет равно 25).

Задание:

    Создайте в main переменную типа int с именем myValue и присвойте ей значение (например, 42).
    Создайте указатель на int с именем ptrValue.
    Присвойте ptrValue адрес переменной myValue с помощью оператора &.
    Выведите на консоль:
        Значение myValue.
        Адрес myValue (используя &myValue).
        Значение ptrValue (это будет тот же адрес).
        Значение, на которое указывает ptrValue (используя *ptrValue).
    Используя указатель ptrValue и оператор разыменования *, измените значение, хранящееся по адресу (т.е. измените myValue через ptrValue). Например, увеличьте его на 10.
    Снова выведите значение myValue на консоль, чтобы убедиться, что оно изменилось.